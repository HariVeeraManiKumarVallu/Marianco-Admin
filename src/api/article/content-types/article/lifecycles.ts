// @ts-nocheckimport { errors } from '@strapi/utils'  const POSITIONS = ['left', 'top right', 'bottom right'] as const type Positions = typeof POSITIONS[number]  export default { 	async beforeCreate(event) { 		const { params: { data }, action } = event; 		const hasValidPosition = POSITIONS.includes(data.featuredGridPosition)   		if (hasValidPosition) { 			await gridPositionValidation(data.featuredGridPosition, data.documentId, action) 		} 		validateIsFeatured(data, hasValidPosition) 		return 	}, 	beforeUpdate: async (event) => { 		const { params: { data, where }, action } = event; 		const hasValidPosition = POSITIONS.includes(data.featuredGridPosition)  		if (hasValidPosition) { 			await gridPositionValidation(data.featuredGridPosition, where.id, action) 		} 		validateIsFeatured(data, hasValidPosition) 		return 	} }  async function gridPositionValidation(position: Positions, id: string, eventType: 'beforeCreate' | 'beforeUpdate') { 	const filters = { 		$and: eventType === 'beforeCreate' ? [{ featuredGridPosition: position }, { documentId: { $ne: id } }] : [{ featuredGridPosition: position }, { id: { $ne: id } }] 	}  	const itemWithSelectedPosition = await strapi.documents('api::article.article').findFirst({ 		filters, 		fields: 'title' 	});  	if (itemWithSelectedPosition) { 		throw new errors.ApplicationError( 			`${position} position is already being used by "${itemWithSelectedPosition.title}"`, 			{ name: 'validation', displayTime: 5000 }, 		) 	} }  function validateIsFeatured(data: any, hasGridPosition: boolean) { 	if (data.isFeatured !== hasGridPosition) { 		data.isFeatured = !data.isFeatured 	}  }
