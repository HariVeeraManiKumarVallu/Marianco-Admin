// @ts-nocheckimport crypto from 'crypto' import { PrintifyRequest, PrintifyWebhookRequestPayload } from '../../../../types/printify'  export default {   async webhook(ctx) {      let payload: PrintifyWebhookRequestPayload      if (process.env.NODE_ENV === 'production') {       try {         payload = verifyWebhookSignature(ctx.request)       } catch (error) {         ctx.send(`Webhook Error: ${error.message}`, { status: 400 });       }     } else {       payload = ctx.request.body     }      try {       if (!payload || !payload.resource.data.action) {         ctx.throw(400, 'Invalid webhook payload')       }        switch (payload.resource.data.action) {         case 'create':           await strapi.service('api::product.product').addProduct({             shopId: payload.resource.data.shop_id,             productId: payload.resource.id,           })            ctx.send({ message: 'Product created successfully' }, 200)           break          // case 'product.updated':         // Handle product updates         // const updatedProduct = await strapi.entityService.update(         //   'api::product.product',         //   payload.data.id,         //   {         //     data: {         //       name: payload.data.title,         //       description: payload.data.description,         //       basePrice: payload.data.variants?.[0]?.price,         //       sku: payload.data.variants?.[0]?.sku,         //     },         //   }         // )         // ctx.send(         //   {         //     message: 'Product updated successfully',         //     productId: updatedProduct.id,         //   },         //   200         // )         // break          default:           strapi.log.info(             `Unhandled webhook event: ${payload.resource.data.action}`           )           ctx.send({ message: 'Webhook received but not processed' }, 202)       }     } catch (error) {       strapi.log.error('Webhook processing error:', error)        if (error instanceof Error) {         ctx.throw(500, `Webhook processing failed: ${error.message}`)       } else {         ctx.throw(500, 'Unexpected error processing webhook')       }     }   }, }  function verifyWebhookSignature(request: PrintifyRequest) {   const signature = request.headers['x-pfy-signature'];   if (!signature) {     throw new Error('Missing Printify webhook signature header');   }    const secretToken = process.env.PRINTIFY_SECRET_TOKEN;   if (!secretToken) {     throw new Error('PRINTIFY_SECRET_TOKEN environment variable is not set');   }    const hmac = crypto.createHmac('sha256', secretToken);   const body = typeof request.body === 'string'     ? request.body     : JSON.stringify(request.body);    hmac.update(body);   const calculatedSignature = 'sha256=' + hmac.digest('hex');    const isValid = crypto.timingSafeEqual(     Buffer.from(signature),     Buffer.from(calculatedSignature)   );    if (!isValid) {     throw new Error('Invalid Printify webhook signature');   }    return typeof request.body === 'string' ? JSON.parse(request.body) : request.body; };
